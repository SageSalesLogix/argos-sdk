//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from L20nParser.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class L20nParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Comment=1, Open=2, Ws=3, Identifier=4, Colon=5, MultiString=6, String=7, 
		Space=8, Close=9;
	public const int
		RULE_document = 0, RULE_entity = 1, RULE_entityName = 2, RULE_entityValue = 3, 
		RULE_entityProperty = 4, RULE_misc = 5;
	public static readonly string[] ruleNames = {
		"document", "entity", "entityName", "entityValue", "entityProperty", "misc"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'<'", null, null, "':'", null, null, null, "'>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Comment", "Open", "Ws", "Identifier", "Colon", "MultiString", "String", 
		"Space", "Close"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "L20nParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static L20nParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public L20nParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public L20nParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class DocumentContext : ParserRuleContext {
		public MiscContext[] misc() {
			return GetRuleContexts<MiscContext>();
		}
		public MiscContext misc(int i) {
			return GetRuleContext<MiscContext>(i);
		}
		public EntityContext[] entity() {
			return GetRuleContexts<EntityContext>();
		}
		public EntityContext entity(int i) {
			return GetRuleContext<EntityContext>(i);
		}
		public DocumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document; } }
		public override void EnterRule(IParseTreeListener listener) {
			IL20nParserListener typedListener = listener as IL20nParserListener;
			if (typedListener != null) typedListener.EnterDocument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IL20nParserListener typedListener = listener as IL20nParserListener;
			if (typedListener != null) typedListener.ExitDocument(this);
		}
	}

	[RuleVersion(0)]
	public DocumentContext document() {
		DocumentContext _localctx = new DocumentContext(Context, State);
		EnterRule(_localctx, 0, RULE_document);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 15;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 12; misc();
					}
					} 
				}
				State = 17;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 21;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Open) {
				{
				{
				State = 18; entity();
				}
				}
				State = 23;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 27;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comment) {
				{
				{
				State = 24; misc();
				}
				}
				State = 29;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityContext : ParserRuleContext {
		public EntityNameContext entityName() {
			return GetRuleContext<EntityNameContext>(0);
		}
		public EntityValueContext entityValue() {
			return GetRuleContext<EntityValueContext>(0);
		}
		public EntityPropertyContext[] entityProperty() {
			return GetRuleContexts<EntityPropertyContext>();
		}
		public EntityPropertyContext entityProperty(int i) {
			return GetRuleContext<EntityPropertyContext>(i);
		}
		public EntityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity; } }
		public override void EnterRule(IParseTreeListener listener) {
			IL20nParserListener typedListener = listener as IL20nParserListener;
			if (typedListener != null) typedListener.EnterEntity(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IL20nParserListener typedListener = listener as IL20nParserListener;
			if (typedListener != null) typedListener.ExitEntity(this);
		}
	}

	[RuleVersion(0)]
	public EntityContext entity() {
		EntityContext _localctx = new EntityContext(Context, State);
		EnterRule(_localctx, 2, RULE_entity);
		int _la;
		try {
			State = 45;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 30; Match(Open);
				State = 31; entityName();
				State = 32; entityValue();
				State = 33; Match(Close);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 35; Match(Open);
				State = 36; entityName();
				State = 37; entityValue();
				State = 39;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 38; entityProperty();
					}
					}
					State = 41;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Identifier );
				State = 43; Match(Close);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(L20nParser.Identifier, 0); }
		public EntityNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IL20nParserListener typedListener = listener as IL20nParserListener;
			if (typedListener != null) typedListener.EnterEntityName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IL20nParserListener typedListener = listener as IL20nParserListener;
			if (typedListener != null) typedListener.ExitEntityName(this);
		}
	}

	[RuleVersion(0)]
	public EntityNameContext entityName() {
		EntityNameContext _localctx = new EntityNameContext(Context, State);
		EnterRule(_localctx, 4, RULE_entityName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityValueContext : ParserRuleContext {
		public ITerminalNode String() { return GetToken(L20nParser.String, 0); }
		public ITerminalNode MultiString() { return GetToken(L20nParser.MultiString, 0); }
		public EntityValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IL20nParserListener typedListener = listener as IL20nParserListener;
			if (typedListener != null) typedListener.EnterEntityValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IL20nParserListener typedListener = listener as IL20nParserListener;
			if (typedListener != null) typedListener.ExitEntityValue(this);
		}
	}

	[RuleVersion(0)]
	public EntityValueContext entityValue() {
		EntityValueContext _localctx = new EntityValueContext(Context, State);
		EnterRule(_localctx, 6, RULE_entityValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49;
			_la = TokenStream.LA(1);
			if ( !(_la==MultiString || _la==String) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityPropertyContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(L20nParser.Identifier, 0); }
		public ITerminalNode String() { return GetToken(L20nParser.String, 0); }
		public EntityPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityProperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			IL20nParserListener typedListener = listener as IL20nParserListener;
			if (typedListener != null) typedListener.EnterEntityProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IL20nParserListener typedListener = listener as IL20nParserListener;
			if (typedListener != null) typedListener.ExitEntityProperty(this);
		}
	}

	[RuleVersion(0)]
	public EntityPropertyContext entityProperty() {
		EntityPropertyContext _localctx = new EntityPropertyContext(Context, State);
		EnterRule(_localctx, 8, RULE_entityProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51; Match(Identifier);
			State = 52; Match(Colon);
			State = 53; Match(String);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MiscContext : ParserRuleContext {
		public ITerminalNode Comment() { return GetToken(L20nParser.Comment, 0); }
		public MiscContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_misc; } }
		public override void EnterRule(IParseTreeListener listener) {
			IL20nParserListener typedListener = listener as IL20nParserListener;
			if (typedListener != null) typedListener.EnterMisc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IL20nParserListener typedListener = listener as IL20nParserListener;
			if (typedListener != null) typedListener.ExitMisc(this);
		}
	}

	[RuleVersion(0)]
	public MiscContext misc() {
		MiscContext _localctx = new MiscContext(Context, State);
		EnterRule(_localctx, 10, RULE_misc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55; Match(Comment);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\v', '<', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', 
		'\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', '\x6', 
		'\t', '\x6', '\x4', '\a', '\t', '\a', '\x3', '\x2', '\a', '\x2', '\x10', 
		'\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x13', '\v', '\x2', '\x3', '\x2', 
		'\a', '\x2', '\x16', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x19', '\v', 
		'\x2', '\x3', '\x2', '\a', '\x2', '\x1C', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', '\x1F', '\v', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x6', '\x3', '*', '\n', '\x3', '\r', '\x3', '\xE', '\x3', 
		'+', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x30', '\n', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x2', '\x2', '\b', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\x2', '\x3', 
		'\x3', '\x2', '\b', '\t', '\x2', ':', '\x2', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '/', '\x3', '\x2', '\x2', '\x2', '\x6', '\x31', '\x3', '\x2', 
		'\x2', '\x2', '\b', '\x33', '\x3', '\x2', '\x2', '\x2', '\n', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\f', '\x39', '\x3', '\x2', '\x2', '\x2', 
		'\xE', '\x10', '\x5', '\f', '\a', '\x2', '\xF', '\xE', '\x3', '\x2', '\x2', 
		'\x2', '\x10', '\x13', '\x3', '\x2', '\x2', '\x2', '\x11', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '\x11', '\x12', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\x13', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\x14', '\x16', '\x5', '\x4', '\x3', '\x2', '\x15', '\x14', '\x3', 
		'\x2', '\x2', '\x2', '\x16', '\x19', '\x3', '\x2', '\x2', '\x2', '\x17', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\x17', '\x18', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x19', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', '\x1C', '\x5', '\f', '\a', '\x2', '\x1B', 
		'\x1A', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\x1D', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x1E', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '\x3', '\x3', '\x2', '\x2', '\x2', '\x1F', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', ' ', '!', '\a', '\x4', '\x2', '\x2', 
		'!', '\"', '\x5', '\x6', '\x4', '\x2', '\"', '#', '\x5', '\b', '\x5', 
		'\x2', '#', '$', '\a', '\v', '\x2', '\x2', '$', '\x30', '\x3', '\x2', 
		'\x2', '\x2', '%', '&', '\a', '\x4', '\x2', '\x2', '&', '\'', '\x5', '\x6', 
		'\x4', '\x2', '\'', ')', '\x5', '\b', '\x5', '\x2', '(', '*', '\x5', '\n', 
		'\x6', '\x2', ')', '(', '\x3', '\x2', '\x2', '\x2', '*', '+', '\x3', '\x2', 
		'\x2', '\x2', '+', ')', '\x3', '\x2', '\x2', '\x2', '+', ',', '\x3', '\x2', 
		'\x2', '\x2', ',', '-', '\x3', '\x2', '\x2', '\x2', '-', '.', '\a', '\v', 
		'\x2', '\x2', '.', '\x30', '\x3', '\x2', '\x2', '\x2', '/', ' ', '\x3', 
		'\x2', '\x2', '\x2', '/', '%', '\x3', '\x2', '\x2', '\x2', '\x30', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '\x31', '\x32', '\a', '\x6', '\x2', '\x2', 
		'\x32', '\a', '\x3', '\x2', '\x2', '\x2', '\x33', '\x34', '\t', '\x2', 
		'\x2', '\x2', '\x34', '\t', '\x3', '\x2', '\x2', '\x2', '\x35', '\x36', 
		'\a', '\x6', '\x2', '\x2', '\x36', '\x37', '\a', '\a', '\x2', '\x2', '\x37', 
		'\x38', '\a', '\t', '\x2', '\x2', '\x38', '\v', '\x3', '\x2', '\x2', '\x2', 
		'\x39', ':', '\a', '\x3', '\x2', '\x2', ':', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\a', '\x11', '\x17', '\x1D', '+', '/',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
